<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jaml.Wpf</name>
    </assembly>
    <members>
        <member name="T:Jaml.Wpf.Constants.EventNames">
            <summary>
            Supported event names
            </summary>
        </member>
        <member name="F:Jaml.Wpf.Constants.EventNames.MediaEnded">
            <summary>
            MediaEnded
            </summary>
        </member>
        <member name="F:Jaml.Wpf.Constants.EventNames.Click">
            <summary>
            Click
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Helpers.PathsHelper">
            <summary>
            Shortcuts to help with paths
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Helpers.PathsHelper.GetUriFromRelativePath(System.String)">
            <summary>
            Create <see cref="T:System.Uri"/> from relative path string
            </summary>
            <param name="relativePath">Relative path</param>
            <returns><see cref="T:System.Uri"/> with full path</returns>
        </member>
        <member name="T:Jaml.Wpf.Helpers.UIHelper">
            <summary>
            Some common methods to help with UI
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Helpers.UIHelper.GetBrushFromImage(System.String)">
            <summary>
            Creates <see cref="T:System.Windows.Media.ImageBrush"/> from image
            </summary>
            <param name="imagePath">Path to image</param>
            <returns><see cref="T:System.Windows.Media.ImageBrush"/> from image</returns>
        </member>
        <member name="M:Jaml.Wpf.Helpers.UIHelper.AddElementToGrid(System.Windows.Controls.Grid,System.Windows.UIElement,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds <see cref="T:System.Windows.UIElement"/> to <see cref="T:System.Windows.Controls.Grid"/>
            </summary>
            <param name="parentGrid">Grid, in which element will be added</param>
            <param name="elementToAdd">Element to add on grid</param>
            <param name="parentRow">Element's row in grid</param>
            <param name="parentColumn">Element's column in grid</param>
            <param name="rowSpan">Element's RowSpan in grid</param>
            <param name="columnSpan">Element's ColumnSpan in grid</param>
        </member>
        <member name="T:Jaml.Wpf.Models.ChildModels.ChildModel">
            <summary>
            Model of child elements
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.ChildModels.ChildModel.MediaElementModel">
            <summary>
            Media element. Can be video or audio file
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.ChildModels.ChildModel.ImageModel">
            <summary>
            Non-animated image
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.ChildModels.ChildModel.ButtonModel">
            <summary>
            Button
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.ChildModels.ChildModel.GridModel">
            <summary>
            Grid
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Models.CommandModels.CommandModel">
            <summary>
            Model of commands
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.CommandModels.CommandModel.Event">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.CommandModels.CommandModel.Method">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.CommandModels.CommandModel.Args">
            <inheritdoc />
        </member>
        <member name="T:Jaml.Wpf.Models.CommandModels.ICommandModel">
            <summary>
            Interface for creating your own CommandModels
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.CommandModels.ICommandModel.Event">
            <summary>
            Event name
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.CommandModels.ICommandModel.Method">
            <summary>
            Method to call
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.CommandModels.ICommandModel.Args">
            <summary>
            Arguments, passed to the method
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Models.JsonModels.IJsonModel">
            <summary>
            Base interface for all json models
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.JsonModels.IJsonModel.GetJsonModel``1(System.String)">
            <summary>
            Parses the model into chosen type from <see cref="T:Jaml.Wpf.Models.JsonModels.IJsonModel"/> children
            </summary>
            <typeparam name="T">Children of <see cref="T:Jaml.Wpf.Models.JsonModels.IJsonModel"/></typeparam>
            <param name="filePath">Path to json file to parse</param>
            <returns>Parsed model</returns>
        </member>
        <member name="T:Jaml.Wpf.Models.JsonModels.JsonModel">
            <summary>
            Base class for parsing json models
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.JsonModels.JsonModel.GetModel``1(System.String)">
            <summary>
            Parses the model into chosen type from <see cref="T:Jaml.Wpf.Models.JsonModels.IJsonModel"/> children
            </summary>
            <typeparam name="T">Children of <see cref="T:Jaml.Wpf.Models.JsonModels.IJsonModel"/></typeparam>
            <param name="filePath">Path to json file to parse</param>
            <returns>Parsed model</returns>
        </member>
        <member name="M:Jaml.Wpf.Models.JsonModels.JsonModel.GetModelAsync``1(System.String)">
            <summary>
            Asynchroniously parses the model into chosen type from <see cref="T:Jaml.Wpf.Models.JsonModels.IJsonModel"/> children
            </summary>
            <typeparam name="T">Children of <see cref="T:Jaml.Wpf.Models.JsonModels.IJsonModel"/></typeparam>
            <param name="filePath">Path to json file to parse</param>
            <returns>Parsed model</returns>
        </member>
        <member name="M:Jaml.Wpf.Models.JsonModels.JsonModel.GetJsonModel``1(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Jaml.Wpf.Models.JsonModels.MainWindowModel">
            <summary>
            Model of MainWindow.json
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.MainWindowModel.MainWindow">
            <summary>
            Json's main window element
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.MainWindowModel.WindowModel">
            <summary>
            Window inside of MainWindow
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Models.JsonModels.PageModel">
            <summary>
            Any page in application
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.PageModel.Page">
            <summary>
            Json's Page element
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.PageModel.GridModel">
            <summary>
            Json's Grid element
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Models.JsonModels.RootModel">
            <summary>
            Root of the application
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.RootModel.Root">
            <summary>
            Json's Root element
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.RootModel.MainWindow">
            <summary>
            Path to main window json
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.RootModel.FirstPage">
            <summary>
            First loaded by Root page
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.RootModel.Styles">
            <summary>
            Json's Styles element
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Models.JsonModels.StylesModel">
            <summary>
            Defines list of styles for app's controls
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.JsonModels.StylesModel.StyleModels">
            <summary>
            Collection of styles
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Models.StyleModels.IStyleModel">
            <summary>
            Base interface for all style models
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.Id">
            <summary>
            Style id
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.FontSize">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.FontFamily">
            <summary>
            Font family path
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.FontStyle">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.FontWeight">
            <summary>
            Font weight
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.Foreground">
            <summary>
            Foreground Argb string
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.Background">
             <summary>
            todo
             Background of the control
             </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.BorderThickness">
            <summary>
            Border thickness
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.IStyleModel.Visibility">
            <summary>
            Visibility
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.StyleModels.IStyleModel.ToStyle``1(``0@)">
            <summary>
            Convert current model to style
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Style"/></typeparam>
            <returns>Converted style</returns>
        </member>
        <member name="T:Jaml.Wpf.Models.StyleModels.StyleModel">
            <summary>
            Basic class, that implements the <see cref="T:Jaml.Wpf.Models.StyleModels.IStyleModel" />
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.Id">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.FontSize">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.FontFamily">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.FontStyle">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.FontWeight">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.Foreground">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.Background">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.BorderThickness">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.StyleModels.StyleModel.Visibility">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Models.StyleModels.StyleModel.ToStyle``1(``0@)">
            <inheritdoc />
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.BackgroundModel">
            <summary>
            todo
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.BackgroundModel.IsImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.BackgroundModel.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.ButtonModel">
            <summary>
            Model of button
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.ButtonModel.Content">
            <summary>
            Element's content
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.ButtonModel.ToButton``1(``0@,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Creates button from model
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/></typeparam>
            <param name="button">Target button</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.ButtonModel.BindProperties``1(``0@)">
            <summary>
            Binds model properies from model to passed element
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/></typeparam>
            <param name="element">Element to take properties</param>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.ColumnDefinitionModel">
            <summary>
            Grid's column definition model
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.ColumnDefinitionModel.Width">
            <summary>
            Width of the column
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.ColumnDefinitionModel.ToColumnDefinition">
            <summary>
            Converts this model to <see cref="T:System.Windows.Controls.ColumnDefinition"/>
            </summary>
            <returns>Converted <see cref="T:System.Windows.Controls.ColumnDefinition"/></returns>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel">
            <summary>
            Base FrameworkElement model
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.StyleId">
            <summary>
            Style id to use on this element
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.FlowDirection">
            <summary>
            Flow direction (default left to right)
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.ForceCursor">
            <summary>
            Force cursor
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.HorizontalAlignment">
            <summary>
            Horizontal alignment
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.LayoutTransform">
            <summary>
            Layout transform
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Margin">
            <summary>
            Margin
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.MaxHeight">
            <summary>
            Max height
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.MaxWidth">
            <summary>
            Max width
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.MinHeight">
            <summary>
            Min height
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.MinWidth">
            <summary>
            min width
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Name">
            <summary>
            Name of element
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.OverridesDefaultStyle">
            <summary>
            Overrides default style
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.UseLayoutRounding">
            <summary>
            Use layout rounding
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.VerticalAlignment">
            <summary>
            Vertical alignment
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.BindingGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.ContextMenu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Cursor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.DataContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.FocusVisualStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.InputScope">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Resources">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Style">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.Tooltip">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.ToFrameworkElement``1(``0@,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Converts this model to one of <see cref="T:System.Windows.FrameworkElement"/>'s children
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.FrameworkElement"/></typeparam>
            <param name="element">Element, where model will be converted</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.FrameworkElementModel.BindProperties``1(``0@)">
            <summary>
            Binds this element's properties
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.FrameworkElement"/></typeparam>
            <param name="element">Target element to bind properties</param>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.GridModel">
            <summary>
            Model of Grid
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.GridModel.RowDefinitions">
            <summary>
            Collection of row definitions
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.GridModel.ColumnDefinitions">
            <summary>
            Collection of column definitions
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.GridModel.Children">
            <summary>
            Collection of children, bound to this grid
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.GridModel.Background">
            <summary>
            Grid's background
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.GridModel.ToGrid``1(``0@,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Creates grid from model
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Controls.Grid"/></typeparam>
            <param name="grid">Target grid</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.GridModel.BindProperties``1(``0@)">
            <summary>
            Binds model properies from model to passed element
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Controls.Grid"/></typeparam>
            <param name="element">Element to take properties</param>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.ImageModel">
            <summary>
            Image model
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.ImageModel.Content">
            <summary>
            Element's content
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.ImageModel.ToImage``1(``0@,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Creates image from model
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Controls.Image"/></typeparam>
            <param name="image">Target image</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.ImageModel.BindProperties``1(``0@)">
            <summary>
            Binds model properies from model to passed element
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Controls.Image"/></typeparam>
            <param name="element">Element to take properties</param>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.IUIElementModel">
            <summary>
            Base interface for all <see cref="T:System.Windows.UIElement"/> on page
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.ParentRow">
            <summary>
            Row position in parent grid
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.ParentColumn">
            <summary>
            Column position in parent grid
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.RowSpan">
            <summary>
            RowSpan in parent grid
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.ColumnSpan">
            <summary>
            ColumnSpan in parent grid
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.Commands">
            <summary>
            Collection of commands, associated with this element
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.AllowDrop">
            <summary>
            Allow drop
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.Clip">
            <summary>
            Clip
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.ClipToBounds">
            <summary>
            Clip to bounds
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.Focusable">
            <summary>
            Focusable
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.IsEnabled">
            <summary>
            Is enabled
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.IsHitTestVisible">
            <summary>
            Is hit test visible
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.IsManipulationEnabled">
            <summary>
            Is manipulation enabled
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.Opacity">
            <summary>
            Opacity
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.RenderSize">
            <summary>
            Render size
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.RenderTransform">
            <summary>
            Render transform
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.RenderTransformOrigin">
            <summary>
            Render transform origin
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.SnapsToDevicePixels">
            <summary>
            Snaps to device pixels
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.Uid">
            <summary>
            Uid
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.Visibility">
            <summary>
            Visibility
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.CacheMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.Effect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.IUIElementModel.OpacityMask">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.IUIElementModel.ToUIElement``1(``0@,Jaml.Wpf.Providers.CommandProvider.ICommandProvider)">
            <summary>
            Converts this model to one of <see cref="T:System.Windows.UIElement"/>'s children
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.UIElement"/></typeparam>
            <param name="element">Element, where model will be converted</param>
            <param name="commandProvider">Command provider</param>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.IUIElementModel.BindProperties``1(``0@)">
            <summary>
            Bind this model properties to the target <see cref="T:System.Windows.UIElement"/>
            </summary>
            <typeparam name="T">Children of<see cref="T:System.Windows.UIElement"/></typeparam>
            <param name="element">Target element</param>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.MediaElementModel">
            <summary>
            Model of media elements, like video or audio
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.MediaElementModel.Content">
            <summary>
            Element's content
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.MediaElementModel.ToMediaElement``1(``0@,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Creates media element from model
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Controls.MediaElement"/></typeparam>
            <param name="mediaElement">Target media element</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.MediaElementModel.BindProperties``1(``0@)">
            <summary>
            Binds model properies from model to passed element
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Controls.MediaElement"/></typeparam>
            <param name="element">Element to take properties</param>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.RowDefinitionModel">
            <summary>
            Grid's row definition model
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.RowDefinitionModel.Height">
            <summary>
            Height of the column
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.RowDefinitionModel.ToRowDefinition">
            <summary>
            Converts this model to <see cref="T:System.Windows.Controls.RowDefinition"/>
            </summary>
            <returns>Converted <see cref="T:System.Windows.Controls.RowDefinition"/></returns>
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.UIElementModel">
            <summary>
            Base class, that implements <see cref="T:Jaml.Wpf.Models.UIElementModels.IUIElementModel"/>
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.ParentRow">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.ParentColumn">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.RowSpan">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.ColumnSpan">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.Commands">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.AllowDrop">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.Clip">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.ClipToBounds">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.Focusable">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.IsHitTestVisible">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.IsManipulationEnabled">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.Opacity">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.RenderSize">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.RenderTransform">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.RenderTransformOrigin">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.SnapsToDevicePixels">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.Uid">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.Visibility">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.CacheMode">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.Effect">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.UIElementModel.OpacityMask">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.UIElementModel.ToUIElement``1(``0@,Jaml.Wpf.Providers.CommandProvider.ICommandProvider)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.UIElementModel.BindProperties``1(``0@)">
            <inheritdoc />
        </member>
        <member name="T:Jaml.Wpf.Models.UIElementModels.WindowModel">
            <summary>
            Window model
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Models.UIElementModels.WindowModel.GridModel">
            <summary>
            Content of the window
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.WindowModel.ToWindow``1(``0@,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Creates window from model
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Window"/></typeparam>
            <param name="window">Target window</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Models.UIElementModels.WindowModel.BindProperties``1(``0@)">
            <summary>
            Binds model properies from model to passed element
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.Window"/></typeparam>
            <param name="element">Element to take properties</param>
        </member>
        <member name="T:Jaml.Wpf.Parsers.PageParser">
            <summary>
            Contains static method to parse different elements of the page
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PageParser.ParseAndAddImage(System.Windows.Controls.Grid,Jaml.Wpf.Models.UIElementModels.ImageModel,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Parses and adds an element to the grid
            </summary>
            <param name="parentGrid">Grid to which bind the element</param>
            <param name="imageModel">Model to parse and bind</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PageParser.ParseAndAddButton(System.Windows.Controls.Grid,Jaml.Wpf.Models.UIElementModels.ButtonModel,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Parses and adds an element to the grid
            </summary>
            <param name="parentGrid">Grid to which bind the element</param>
            <param name="buttonModel">Model to parse and bind</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PageParser.ParseAndAddMediaElement(System.Windows.Controls.Grid,Jaml.Wpf.Models.UIElementModels.MediaElementModel,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Parses and adds an element to the grid
            </summary>
            <param name="parentGrid">Grid to which bind the element</param>
            <param name="mediaElementModel">Model to parse and bind</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PageParser.ParseAndAddGrid(System.Windows.Controls.Grid,Jaml.Wpf.Models.UIElementModels.GridModel,Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Parses and adds an element to the grid
            </summary>
            <param name="parentGrid">Grid to which bind the element</param>
            <param name="gridModel">Model to parse and bind</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PageParser.ParseChildren(System.Windows.Controls.Grid,System.Collections.Generic.IEnumerable{Jaml.Wpf.Models.ChildModels.ChildModel},Jaml.Wpf.Providers.CommandProvider.ICommandProvider,Jaml.Wpf.Providers.StyleProvider.IStyleProvider)">
            <summary>
            Parses all children of the grid
            </summary>
            <param name="parentGrid">Grid, to which children are bound</param>
            <param name="children">Collection of grid's child controls</param>
            <param name="commandProvider">Command provider</param>
            <param name="styleProvider">Style provider</param>
        </member>
        <member name="T:Jaml.Wpf.Parsers.PropertyParser">
            <summary>
            Contains static method to parse different <see cref="T:System.Windows.UIElement"/>'s properties
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PropertyParser.ParseFontWeight(System.String)">
            <summary>
            Parse the <see cref="T:System.Windows.FontWeight"/> from string
            </summary>
            <param name="fontWeight">Font weight string</param>
            <returns>Parsed <see cref="T:System.Windows.FontWeight"/></returns>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PropertyParser.ParseFontStyle(System.String)">
            <summary>
            Parse the <see cref="T:System.Windows.FontStyle"/> from string
            </summary>
            <param name="fontStyle">Font style string</param>
            <returns>Parsed <see cref="T:System.Windows.FontStyle"/></returns>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PropertyParser.ConvertArgbToBrush(System.String)">
            <summary>
            Converts the argb string to <see cref="T:System.Windows.Media.Brush"/>
            </summary>
            <param name="argbString">argb string (e.g. 255,100,100,100)</param>
            <returns>Parsed <see cref="T:System.Windows.Media.Brush"/></returns>
        </member>
        <member name="M:Jaml.Wpf.Parsers.PropertyParser.ParseBackground(Jaml.Wpf.Models.UIElementModels.BackgroundModel)">
            <summary>
            todo
            </summary>
        </member>
        <member name="T:Jaml.Wpf.Providers.CommandProvider.CommandProvider">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Providers.CommandProvider.CommandProvider.Commands">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.#ctor(System.Collections.Generic.Dictionary{System.String,System.Delegate})">
            <summary>
            Creates a new <see cref="T:Jaml.Wpf.Providers.CommandProvider.CommandProvider"/> with specified commands
            </summary>
            <param name="commands">Commands for this provider</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.#ctor">
            <summary>
            Creates a new <see cref="T:Jaml.Wpf.Providers.CommandProvider.CommandProvider"/> with empty dictionary of commands
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.RegisterCommands(System.Collections.Generic.Dictionary{System.String,System.Delegate})">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.UnregisterCommands(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.ClearCommands">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.RegisterCommand(System.String,System.Delegate)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.UnregisterCommand(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.AddToExistentCommand(System.String,System.Delegate)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.RemoveFromExistentCommand(System.String,System.Delegate)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.RunCommand(System.String,System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.GetCommand(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.BindCommand``1(``0@,Jaml.Wpf.Models.CommandModels.ICommandModel)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.CommandProvider.BindCommands``1(``0@,System.Collections.Generic.IEnumerable{Jaml.Wpf.Models.CommandModels.ICommandModel})">
            <inheritdoc />
        </member>
        <member name="T:Jaml.Wpf.Providers.CommandProvider.ICommandProvider">
            <summary>
            Base interface for command operations
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.Commands">
            <summary>
            Dictionary of commands. Key is name, and Value is delegate to run
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.RegisterCommands(System.Collections.Generic.Dictionary{System.String,System.Delegate})">
            <summary>
            Registers all commands from dictionary
            </summary>
            <param name="commands">Dictionary to register</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.UnregisterCommands(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Delete collection of commands with specified keys
            </summary>
            <param name="commandNames">Collection of keys to delete from dictionary</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.ClearCommands">
            <summary>
            Clears dictionary of commands
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.RegisterCommand(System.String,System.Delegate)">
            <summary>
            Registers one command
            </summary>
            <param name="commandName">Name of command</param>
            <param name="command">Delegate to run</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.UnregisterCommand(System.String)">
            <summary>
            Delete the specified command from dictionary
            </summary>
            <param name="commandName">Comamnd name to delete</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.AddToExistentCommand(System.String,System.Delegate)">
            <summary>
            Adds additional delegate to already existent command
            </summary>
            <param name="commandName">Command name, to which delegate will be added</param>
            <param name="delegateToAdd">Delegate to add</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.RemoveFromExistentCommand(System.String,System.Delegate)">
            <summary>
            Removes the delegate from alreade existent command
            </summary>
            <param name="commandName">Name of command, from which delegate will be removed</param>
            <param name="delegateToRemove">Delegate to remove</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.RunCommand(System.String,System.Object,System.String)">
            <summary>
            Starts the command
            </summary>
            <param name="commandName">Name of command to start</param>
            <param name="sender">Sender of command</param>
            <param name="args">Arguments for command</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.GetCommand(System.String)">
            <summary>
            Gets command by name
            </summary>
            <param name="commandName">Name of command to get</param>
            <returns>Command's <see cref="T:System.Delegate"/></returns>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.BindCommand``1(``0@,Jaml.Wpf.Models.CommandModels.ICommandModel)">
            <summary>
            Binds command to passed element
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.UIElement"/></typeparam>
            <param name="element">Target element to bind the command</param>
            <param name="commandModel">Model of command for element</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.CommandProvider.ICommandProvider.BindCommands``1(``0@,System.Collections.Generic.IEnumerable{Jaml.Wpf.Models.CommandModels.ICommandModel})">
            <summary>
            Binds commands to passed element
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.UIElement"/></typeparam>
            <param name="element">Target element to bind the command</param>
            <param name="commandModels">Collection of models of command for element</param>
        </member>
        <member name="T:Jaml.Wpf.Providers.StyleProvider.IStyleProvider">
            <summary>
            Base interface for style operations
            </summary>
        </member>
        <member name="P:Jaml.Wpf.Providers.StyleProvider.IStyleProvider.Styles">
            <summary>
            Dictionary of styles. Key is id, and Value is style model
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.IStyleProvider.RegisterStyles(System.Collections.Generic.Dictionary{System.Int32,Jaml.Wpf.Models.StyleModels.IStyleModel})">
            <summary>
            Registers all styles from dictionary
            </summary>
            <param name="styles">Dictionary to register</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.IStyleProvider.UnregisterStyles(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Delete collection of styles with specified keys
            </summary>
            <param name="styleIds">Collection of keys to delete from dictionary</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.IStyleProvider.ClearStyles">
            <summary>
            Clears dictionary of styles
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.IStyleProvider.RegisterStyle(System.Int32,Jaml.Wpf.Models.StyleModels.IStyleModel)">
            <summary>
            Registers one style
            </summary>
            <param name="styleId">Id of style</param>
            <param name="styleModel">Style model</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.IStyleProvider.UnregisterStyle(System.Int32)">
            <summary>
            Delete the specified style from dictionary
            </summary>
            <param name="styleId">Id of style</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.IStyleProvider.GetStyle(System.Int32)">
            <summary>
            Gets style by name
            </summary>
            <param name="styleId">Id of style to get</param>
            <returns>Command's <see cref="T:Jaml.Wpf.Models.StyleModels.IStyleModel"/></returns>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.IStyleProvider.BindStyle``1(``0@,System.Int32)">
            <summary>
            Bind style to element
            </summary>
            <typeparam name="T">Children of <see cref="T:System.Windows.FrameworkElement"/></typeparam>
            <param name="element">Target element to bind the style</param>
            <param name="styleId">Id of style to bind to element</param>
        </member>
        <member name="T:Jaml.Wpf.Providers.StyleProvider.StyleProvider">
            <inheritdoc />
        </member>
        <member name="P:Jaml.Wpf.Providers.StyleProvider.StyleProvider.Styles">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.#ctor(System.Collections.Generic.Dictionary{System.Int32,Jaml.Wpf.Models.StyleModels.IStyleModel})">
            <summary>
            Creates a new <see cref="T:Jaml.Wpf.Providers.StyleProvider.StyleProvider"/> with specified styles
            </summary>
            <param name="styles">Styles for this provider</param>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.#ctor">
            <summary>
            Creates a new <see cref="T:Jaml.Wpf.Providers.StyleProvider.StyleProvider"/> with empty dictionary of styles
            </summary>
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.RegisterStyles(System.Collections.Generic.Dictionary{System.Int32,Jaml.Wpf.Models.StyleModels.IStyleModel})">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.UnregisterStyles(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.ClearStyles">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.RegisterStyle(System.Int32,Jaml.Wpf.Models.StyleModels.IStyleModel)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.UnregisterStyle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.GetStyle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Jaml.Wpf.Providers.StyleProvider.StyleProvider.BindStyle``1(``0@,System.Int32)">
            <inheritdoc />
        </member>
    </members>
</doc>
